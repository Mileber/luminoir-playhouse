{"version":3,"file":"SudokuGame-C4fQDK45.js","sources":["../../src/components/games/SudokuGenerator.ts","../../src/components/games/SudokuGame.vue"],"sourcesContent":["// 数独生成器模块\nexport class SudokuGenerator {\n  // 生成一个完整的数独终盘\n  public generateCompleteBoard(): number[][] {\n    // 创建空的9x9棋盘\n    const board: number[][] = Array(9).fill(0).map(() => Array(9).fill(0));\n    \n    // 使用回溯算法填充棋盘\n    this.solveSudoku(board);\n    \n    return board;\n  }\n  \n  // 生成指定难度的数独题目\n  public generatePuzzle(difficulty: 'easy' | 'medium' | 'hard'): number[][] {\n    // 先生成一个完整的终盘\n    const completeBoard = this.generateCompleteBoard();\n    \n    // 根据难度确定挖去的数字数量\n    let cellsToRemove: number;\n    switch (difficulty) {\n      case 'easy':\n        cellsToRemove = 40; // 移除40个数字\n        break;\n      case 'medium':\n        cellsToRemove = 50; // 移除50个数字\n        break;\n      case 'hard':\n        cellsToRemove = 60; // 移除60个数字\n        break;\n      default:\n        cellsToRemove = 40;\n    }\n    \n    // 复制完整棋盘\n    const puzzle: number[][] = JSON.parse(JSON.stringify(completeBoard));\n    \n    // 挖洞生成题目\n    this.digHoles(puzzle, cellsToRemove);\n    \n    return puzzle;\n  }\n  \n  // 数独求解器（回溯算法）\n  private solveSudoku(board: number[][]): boolean {\n    // 寻找空格子\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (board[row]?.[col] === 0) {\n          // 尝试填入1-9\n          const numbers = this.shuffleArray([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n          for (const num of numbers) {\n            if (this.isValidPlacement(board, row, col, num)) {\n              // @ts-expect-error 确保访问是安全的 - board[row]已通过循环验证存在\n              board[row][col] = num;\n              \n              // 递归求解\n              if (this.solveSudoku(board)) {\n                return true;\n              }\n              \n              // 回溯\n              // @ts-expect-error 确保访问是安全的 - board[row]已通过循环验证存在\n              board[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  \n  // 检查在指定位置放置数字是否有效\n  private isValidPlacement(board: number[][], row: number, col: number, num: number): boolean {\n    // 检查行\n    for (let i = 0; i < 9; i++) {\n      if (board[row]?.[i] === num) {\n        return false;\n      }\n    }\n    \n    // 检查列\n    for (let i = 0; i < 9; i++) {\n      if (board[i]?.[col] === num) {\n        return false;\n      }\n    }\n    \n    // 检查3x3宫格\n    const startRow = Math.floor(row / 3) * 3;\n    const startCol = Math.floor(col / 3) * 3;\n    \n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[startRow + i]?.[startCol + j] === num) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  }\n  \n  // 挖洞算法\n  private digHoles(board: number[][], cellsToRemove: number): void {\n    // 创建所有位置的数组\n    const positions: [number, number][] = [];\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        positions.push([row, col]);\n      }\n    }\n    \n    // 随机打乱位置\n    this.shuffleArray(positions);\n    \n    let removedCount = 0;\n    for (const [row, col] of positions) {\n      if (removedCount >= cellsToRemove) {\n        break;\n      }\n      \n      // 检查数组访问安全性\n      if (!board[row] || board[row][col] === undefined) {\n        continue;\n      }\n      \n      // 保存当前值\n      const oldValue = board[row][col];\n      \n      // 挖掉这个数字\n      board[row][col] = 0;\n      \n      // 检查是否仍有唯一解\n      if (this.hasUniqueSolution(JSON.parse(JSON.stringify(board)))) {\n        removedCount++;\n      } else {\n        // 如果不唯一，恢复原值\n        board[row][col] = oldValue;\n      }\n    }\n  }\n  \n  // 检查题目是否有唯一解\n  private hasUniqueSolution(board: number[][]): boolean {\n    return this.countSolutions(JSON.parse(JSON.stringify(board))) === 1;\n  }\n  \n  // 计算题目解的数量（最多计算到2）\n  private countSolutions(board: number[][], limit: number = 2): number {\n    // 寻找空格子\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (board[row]?.[col] === 0) {\n          let count = 0;\n          // 尝试填入1-9\n          for (let num = 1; num <= 9; num++) {\n            if (this.isValidPlacement(board, row, col, num)) {\n              // @ts-expect-error 确保访问是安全的 - board[row]已通过循环验证存在\n              board[row][col] = num;\n              \n              // 递归计算解的数量\n              count += this.countSolutions(board, limit);\n              \n              // 如果已经超过了限制，直接返回\n              if (count >= limit) {\n                return count;\n              }\n              \n              // 回溯\n              // @ts-expect-error 确保访问是安全的 - board[row]已通过循环验证存在\n              board[row][col] = 0;\n            }\n          }\n          return count;\n        }\n      }\n    }\n    // 没有空格子，说明找到了一个解\n    return 1;\n  }\n  \n  // 随机打乱数组\n  private shuffleArray<T>(array: T[]): T[] {\n    const result = [...array];\n    for (let i = result.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      // 使用类型断言确保交换的安全性\n      [result[i], result[j]] = [result[j] as T, result[i] as T];\n    }\n    return result;\n  }\n}\n\n// 预生成的数独题目库\nexport class SudokuPuzzleBank {\n  private generator: SudokuGenerator;\n  private puzzles: Map<string, number[][][]>;\n  private maxPuzzlesPerDifficulty: number;\n  \n  constructor(maxPuzzlesPerDifficulty: number = 5) {\n    this.generator = new SudokuGenerator();\n    this.puzzles = new Map();\n    this.maxPuzzlesPerDifficulty = maxPuzzlesPerDifficulty;\n    \n    // 初始化每个难度的题目数组\n    this.puzzles.set('easy', []);\n    this.puzzles.set('medium', []);\n    this.puzzles.set('hard', []);\n  }\n  \n  // 预生成题目\n  public preGeneratePuzzles(): void {\n    console.log('开始预生成数独题目...');\n    \n    // 为每个难度生成指定数量的题目\n    const difficulties: ('easy' | 'medium' | 'hard')[] = ['easy', 'medium', 'hard'];\n    \n    for (const difficulty of difficulties) {\n      const puzzlesForDifficulty = this.puzzles.get(difficulty) || [];\n      \n      // 生成题目直到达到最大数量\n      while (puzzlesForDifficulty.length < this.maxPuzzlesPerDifficulty) {\n        try {\n          console.log(`生成${difficulty}难度题目 (${puzzlesForDifficulty.length + 1}/${this.maxPuzzlesPerDifficulty})`);\n          const puzzle = this.generator.generatePuzzle(difficulty);\n          puzzlesForDifficulty.push(puzzle);\n        } catch (error) {\n          console.error(`生成${difficulty}难度题目时出错:`, error);\n          // 如果出错，跳出循环避免无限循环\n          break;\n        }\n      }\n      \n      this.puzzles.set(difficulty, puzzlesForDifficulty);\n    }\n    \n    console.log('数独题目预生成完成');\n  }\n  \n  // 获取指定难度的随机题目\n  public getRandomPuzzle(difficulty: 'easy' | 'medium' | 'hard'): number[][] {\n    const puzzlesForDifficulty = this.puzzles.get(difficulty) || [];\n    \n    // 如果该难度没有预生成的题目，则实时生成一个\n    if (puzzlesForDifficulty.length === 0) {\n      console.warn(`没有预生成的${difficulty}难度题目，实时生成一个`);\n      return this.generator.generatePuzzle(difficulty);\n    }\n    \n    // 随机选择一个题目\n    const randomIndex = Math.floor(Math.random() * puzzlesForDifficulty.length);\n    return JSON.parse(JSON.stringify(puzzlesForDifficulty[randomIndex]));\n  }\n  \n  // 获取题目库状态\n  public getPuzzleBankStatus(): Record<string, number> {\n    const status: Record<string, number> = {};\n    for (const [difficulty, puzzles] of this.puzzles.entries()) {\n      status[difficulty] = puzzles.length;\n    }\n    return status;\n  }\n}","<template>\n  <div class=\"sudoku-game\">\n    <div class=\"container\">\n      <h1>数独游戏</h1>\n      <div class=\"game-info\">\n        <div class=\"difficulty-selector\">\n          <label>难度:</label>\n          <select v-model=\"selectedDifficulty\" @change=\"newGame\">\n            <option value=\"easy\">简单</option>\n            <option value=\"medium\">中等</option>\n            <option value=\"hard\">困难</option>\n          </select>\n        </div>\n        <div class=\"controls\">\n          <button @click=\"checkSolution\" class=\"check-btn\">检查答案</button>\n          <button @click=\"newGame\" class=\"new-game-btn\">新游戏</button>\n          <button @click=\"resetBoard\" class=\"reset-btn\">重置</button>\n        </div>\n      </div>\n      \n      <div v-if=\"loading\" class=\"loading\">\n        正在生成新的题目，请稍候...\n      </div>\n      \n      <div v-else class=\"sudoku-board\">\n        <div \n          v-for=\"(row, rowIndex) in board\" \n          :key=\"rowIndex\"\n          class=\"sudoku-row\"\n          :class=\"{ 'thick-bottom': (rowIndex + 1) % 3 === 0 && rowIndex !== 8 }\"\n        >\n          <div \n            v-for=\"(cell, colIndex) in row\" \n            :key=\"colIndex\"\n            class=\"sudoku-cell\"\n            :class=\"{\n              'fixed': puzzle[rowIndex]?.[colIndex] !== 0,\n              'user-input': puzzle[rowIndex]?.[colIndex] === 0,\n              'selected': isSelected(rowIndex, colIndex),\n              'thick-right': (colIndex + 1) % 3 === 0 && colIndex !== 8,\n              'error': errors[rowIndex]?.[colIndex]\n            }\"\n            @click=\"selectCell(rowIndex, colIndex)\"\n          >\n            {{ cell !== 0 ? cell : '' }}\n          </div>\n        </div>\n      </div>\n      \n      <div v-if=\"!loading\" class=\"number-input\">\n        <div class=\"number-row\">\n          <button \n            v-for=\"num in 9\" \n            :key=\"num\" \n            @click=\"inputNumber(num)\"\n            class=\"number-btn\"\n          >\n            {{ num }}\n          </button>\n          <button @click=\"clearCell\" class=\"clear-btn\">清除</button>\n        </div>\n      </div>\n      \n      <div v-if=\"completed\" class=\"message success\">\n        恭喜！你完成了数独游戏！\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive, onMounted, onUnmounted } from 'vue'\nimport { SudokuPuzzleBank } from './SudokuGenerator'\n\n// 定义组件名称\ndefineOptions({\n  name: 'SudokuGame'\n})\n\n// 游戏状态\nconst selectedDifficulty = ref<'easy' | 'medium' | 'hard'>('easy')\nconst puzzle = ref<number[][]>([])\nconst board = ref<number[][]>([])\nconst solution = ref<number[][]>([])\nconst errors = ref<boolean[][]>([])\nconst selectedCell = reactive({ row: -1, col: -1 })\nconst completed = ref(false)\nconst loading = ref(true)\n\n// 数独题目库\nconst puzzleBank = new SudokuPuzzleBank(5) // 每种难度预生成5个题目\n\n// 初始化错误标记数组\nconst initErrors = () => {\n  errors.value = Array(9).fill(null).map(() => Array(9).fill(false))\n}\n\n// 检查是否选中某个单元格\nconst isSelected = (row: number, col: number) => {\n  return selectedCell.row === row && selectedCell.col === col\n}\n\n// 选择单元格\nconst selectCell = (row: number, col: number) => {\n  // 只能选择非固定数字的单元格\n  if (puzzle.value[row]?.[col] === 0) {\n    selectedCell.row = row\n    selectedCell.col = col\n  }\n}\n\n// 输入数字\nconst inputNumber = (num: number) => {\n  // 确保有选中的单元格\n  if (selectedCell.row === -1 || selectedCell.col === -1) return\n  \n  const row = selectedCell.row\n  const col = selectedCell.col\n  \n  // 只能修改非固定数字的单元格\n  if (puzzle.value[row]?.[col] === 0) {\n    if (board.value[row]) {\n      board.value[row][col] = num\n    }\n    if (errors.value[row]) {\n      errors.value[row][col] = false\n    }\n    checkCompletion()\n  }\n}\n\n// 清除单元格\nconst clearCell = () => {\n  // 确保有选中的单元格\n  if (selectedCell.row === -1 || selectedCell.col === -1) return\n  \n  const row = selectedCell.row\n  const col = selectedCell.col\n  \n  // 只能清除非固定数字的单元格\n  if (puzzle.value[row]?.[col] === 0) {\n    if (board.value[row]) {\n      board.value[row][col] = 0\n    }\n    if (errors.value[row]) {\n      errors.value[row][col] = false\n    }\n  }\n}\n\n// 检查答案是否正确\nconst checkSolution = () => {\n  resetErrors()\n  \n  let hasErrors = false\n  \n  // 检查每一行\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      const cellValue = board.value[row]?.[col];\n      if (cellValue !== undefined && cellValue !== 0 && !isValidPlacement(board.value, row, col, cellValue)) {\n        if (errors.value[row]?.[col] !== undefined) {\n          errors.value[row]![col] = true\n        }\n        hasErrors = true\n      }\n    }\n  }\n  \n  // 检查每一列\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      const cellValue = board.value[row]?.[col];\n      if (cellValue !== undefined && cellValue !== 0 && !isValidPlacement(board.value, row, col, cellValue)) {\n        if (errors.value[row]?.[col] !== undefined) {\n          errors.value[row]![col] = true\n        }\n        hasErrors = true\n      }\n    }\n  }\n  \n  // 检查每个3x3子网格\n  for (let boxRow = 0; boxRow < 3; boxRow++) {\n    for (let boxCol = 0; boxCol < 3; boxCol++) {\n      const startRow = boxRow * 3\n      const startCol = boxCol * 3\n      for (let row = startRow; row < startRow + 3; row++) {\n        for (let col = startCol; col < startCol + 3; col++) {\n          const cellValue = board.value[row]?.[col];\n          if (cellValue !== undefined && cellValue !== 0 && !isValidPlacement(board.value, row, col, cellValue)) {\n            if (errors.value[row]?.[col] !== undefined) {\n              errors.value[row]![col] = true\n            }\n            hasErrors = true\n          }\n        }\n      }\n    }\n  }\n  \n  if (!hasErrors) {\n    alert('所有数字都正确放置！')\n  } else {\n    alert('发现错误，请检查标红的数字。')\n  }\n}\n\n// 重置错误标记\nconst resetErrors = () => {\n  for (let row = 0; row < 9; row++) {\n    if (errors.value[row]) {\n      for (let col = 0; col < 9; col++) {\n        if (errors.value[row]?.[col] !== undefined) {\n          errors.value[row]![col] = false\n        }\n      }\n    }\n  }\n}\n\n// 检查是否完成游戏\nconst checkCompletion = () => {\n  // 检查是否所有单元格都已填满且没有错误\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      const cellValue = board.value[row]?.[col];\n      if (cellValue === undefined || cellValue === 0) {\n        completed.value = false\n        return\n      }\n      \n      if (!isValidPlacement(board.value, row, col, cellValue)) {\n        completed.value = false\n        return\n      }\n    }\n  }\n  \n  completed.value = true\n}\n\n// 验证数字放置是否有效\nconst isValidPlacement = (board: number[][], row: number, col: number, num: number): boolean => {\n  // 检查行\n  for (let i = 0; i < 9; i++) {\n    const cellValue = board[row]?.[i];\n    if (i !== col && cellValue !== undefined && cellValue === num) {\n      return false\n    }\n  }\n  \n  // 检查列\n  for (let i = 0; i < 9; i++) {\n    const cellValue = board[i]?.[col];\n    if (i !== row && cellValue !== undefined && cellValue === num) {\n      return false\n    }\n  }\n  \n  // 检查3x3子网格\n  const startRow = Math.floor(row / 3) * 3\n  const startCol = Math.floor(col / 3) * 3\n  \n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      const currentRow = startRow + i\n      const currentCol = startCol + j\n      const cellValue = board[currentRow]?.[currentCol];\n      if (currentRow !== row && currentCol !== col && cellValue !== undefined && cellValue === num) {\n        return false\n      }\n    }\n  }\n  \n  return true\n}\n\n// 重置游戏板\nconst resetBoard = () => {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (puzzle.value[row]?.[col] === 0) {\n        if (board.value[row]?.[col] !== undefined) {\n          board.value[row]![col] = 0\n        }\n      }\n    }\n  }\n  resetErrors()\n  completed.value = false\n  selectedCell.row = -1\n  selectedCell.col = -1\n}\n\n// 开始新游戏\nconst newGame = () => {\n  loading.value = true\n  \n  // 在下一个事件循环中执行，确保loading状态先更新\n  setTimeout(() => {\n    try {\n      // 从预生成的题目库中获取随机题目\n      const newPuzzle = puzzleBank.getRandomPuzzle(selectedDifficulty.value)\n      \n      // 初始化游戏板\n      puzzle.value = JSON.parse(JSON.stringify(newPuzzle))\n      board.value = JSON.parse(JSON.stringify(newPuzzle))\n      solution.value = JSON.parse(JSON.stringify(newPuzzle)) // 简化处理，实际应该有完整解\n      \n      // 初始化错误标记\n      initErrors()\n      \n      // 重置状态\n      completed.value = false\n      selectedCell.row = -1\n      selectedCell.col = -1\n    } catch (error) {\n      console.error('获取新题目时出错:', error)\n      alert('生成新题目时出错，请重试')\n    } finally {\n      loading.value = false\n    }\n  }, 0)\n}\n\n// 预生成题目\nconst preGeneratePuzzles = () => {\n  loading.value = true\n  console.log('开始预生成题目...')\n  \n  setTimeout(() => {\n    try {\n      puzzleBank.preGeneratePuzzles()\n      console.log('题目预生成状态:', puzzleBank.getPuzzleBankStatus())\n      loading.value = false\n      // 开始第一个游戏\n      newGame()\n    } catch (error) {\n      console.error('预生成题目时出错:', error)\n      loading.value = false\n      alert('预生成题目时出错，请重试')\n    }\n  }, 0)\n}\n\n// 组件挂载时初始化游戏\nonMounted(() => {\n  preGeneratePuzzles()\n})\n\n// 组件卸载前清理\nonUnmounted(() => {\n  // 清理工作（如果需要）\n})\n</script>\n\n<style scoped>\n.sudoku-game {\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\n\n.container {\n  max-width: 500px;\n  width: 100%;\n}\n\n.game-info {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.difficulty-selector label {\n  margin-right: 10px;\n  font-weight: bold;\n}\n\n.controls {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\nbutton {\n  padding: 8px 12px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.check-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.new-game-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.reset-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.sudoku-board {\n  display: inline-block;\n  border: 2px solid #000;\n  margin-bottom: 20px;\n}\n\n.sudoku-row {\n  display: flex;\n}\n\n.sudoku-row.thick-bottom {\n  border-bottom: 2px solid #000;\n}\n\n.sudoku-cell {\n  width: 40px;\n  height: 40px;\n  border: 1px solid #ccc;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  font-weight: bold;\n  cursor: pointer;\n  user-select: none;\n  position: relative;\n}\n\n.sudoku-cell.thick-right {\n  border-right: 2px solid #000;\n}\n\n.sudoku-cell.fixed {\n  background-color: #f0f0f0;\n  color: #333;\n}\n\n.sudoku-cell.user-input {\n  background-color: #fff;\n  color: #2196F3;\n}\n\n.sudoku-cell.selected {\n  background-color: #e3f2fd;\n}\n\n.sudoku-cell.error {\n  background-color: #ffcdd2;\n  color: #f44336;\n}\n\n.number-input {\n  margin-bottom: 20px;\n}\n\n.number-row {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n}\n\n.number-btn, .clear-btn {\n  flex: 1;\n  min-width: 40px;\n  padding: 10px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.clear-btn {\n  background-color: #f44336;\n}\n\n.message {\n  padding: 15px;\n  border-radius: 4px;\n  text-align: center;\n  font-weight: bold;\n  font-size: 18px;\n}\n\n.success {\n  background-color: #d4edda;\n  color: #155724;\n  border: 1px solid #c3e6cb;\n}\n\n.loading {\n  text-align: center;\n  padding: 20px;\n  font-size: 18px;\n  color: #666;\n}\n\n/* 移动端适配 */\n@media (max-width: 768px) {\n  .sudoku-cell {\n    width: 30px;\n    height: 30px;\n    font-size: 16px;\n  }\n  \n  .number-btn, .clear-btn {\n    min-width: 30px;\n    padding: 8px;\n    font-size: 14px;\n  }\n  \n  .game-info {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .controls {\n    justify-content: center;\n  }\n}\n\n@media (max-width: 480px) {\n  .sudoku-cell {\n    width: 25px;\n    height: 25px;\n    font-size: 14px;\n  }\n  \n  .container {\n    padding: 10px;\n  }\n}\n</style>"],"names":["SudokuGenerator","board","difficulty","completeBoard","cellsToRemove","puzzle","row","col","numbers","num","i","startRow","startCol","j","positions","removedCount","oldValue","limit","count","array","result","SudokuPuzzleBank","maxPuzzlesPerDifficulty","difficulties","puzzlesForDifficulty","error","randomIndex","status","puzzles","selectedDifficulty","ref","solution","errors","selectedCell","reactive","completed","loading","puzzleBank","initErrors","isSelected","selectCell","inputNumber","checkCompletion","clearCell","checkSolution","resetErrors","hasErrors","cellValue","isValidPlacement","boxRow","boxCol","currentRow","currentCol","resetBoard","newGame","newPuzzle","preGeneratePuzzles","onMounted","onUnmounted","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","_hoisted_3","_hoisted_4","$event","_hoisted_5","_hoisted_6","_Fragment","_renderList","rowIndex","_normalizeClass","cell","colIndex","_toDisplayString","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11"],"mappings":"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"}