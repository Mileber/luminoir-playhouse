{"version":3,"file":"TetrisGame-CqGtU5sL.js","sources":["../../src/components/games/TetrisGame.vue"],"sourcesContent":["<template>\n  <div class=\"tetris-game\">\n    <div class=\"game-info\">\n      <div>Score: {{ score }}</div>\n      <div>Next Piece:</div>\n      <canvas ref=\"nextCanvas\" class=\"next-piece\" width=\"120\" height=\"120\"></canvas>\n      <div v-if=\"gameOver\">Game Over!</div>\n      <button @click=\"resetGame\" v-if=\"gameOver\">New Game</button>\n      \n      <div class=\"touch-instructions\" v-if=\"isMobile\">\n        <p>触摸操作说明:</p>\n        <p>- 左右滑动: 移动方块</p>\n        <p>- 向下滑动: 下落</p>\n        <p>- 向上滑动: 旋转</p>\n        <p>- 快速下滑: 硬降落</p>\n        <p>- 也可使用下方按钮控制</p>\n      </div>\n    </div>\n    <canvas \n      ref=\"tetrisCanvas\" \n      class=\"game-canvas\" \n      width=\"600\" \n      height=\"800\"\n      @touchstart=\"handleTouchStart\"\n      @touchmove=\"handleTouchMove\"\n    ></canvas>\n    \n    <!-- 移动端控制按钮 -->\n    <div class=\"mobile-controls\" v-if=\"isMobile\">\n      <button @touchstart.prevent=\"playerRotate(-1)\" @mousedown=\"playerRotate(-1)\">↻ Left</button>\n      <button @touchstart.prevent=\"playerMove(-1)\" @mousedown=\"playerMove(-1)\">← Left</button>\n      <button @touchstart.prevent=\"playerMove(1)\" @mousedown=\"playerMove(1)\">Right →</button>\n      <button @touchstart.prevent=\"playerRotate(1)\" @mousedown=\"playerRotate(1)\">Right ↺</button>\n      <button @touchstart.prevent=\"playerDrop\" @mousedown=\"playerDrop\">↓ Drop</button>\n      <button @touchstart.prevent=\"playerHardDrop\" @mousedown=\"playerHardDrop\">⤓ Hard Drop</button>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, computed } from 'vue'\n\n// 游戏常量\nconst ARENA_WIDTH = 15\nconst ARENA_HEIGHT = 20\nconst SCALE = 40\nconst DROP_INTERVAL = 1000\n\n// 游戏变量\nconst tetrisCanvas = ref<HTMLCanvasElement | null>(null)\nconst nextCanvas = ref<HTMLCanvasElement | null>(null)\nconst score = ref(0)\nconst gameOver = ref(false)\n\n// 检测是否为移动端\nconst isMobile = computed(() => {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n})\n\n// 游戏区域\nlet arena: number[][] = []\n// 当前方块\nconst player: {\n  pos: { x: number; y: number }\n  matrix: number[][]\n  score: number\n} = {\n  pos: { x: 0, y: 0 },\n  matrix: [],\n  score: 0\n}\n\n// 下一个方块\nlet nextPiece: number[][] = []\n\n// 游戏时间控制\nlet dropCounter = 0\nlet dropInterval = DROP_INTERVAL\nlet lastTime = 0\n\n// 方块类型\nconst PIECES = {\n  T: [\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  O: [\n    [2, 2],\n    [2, 2]\n  ],\n  L: [\n    [0, 0, 3],\n    [3, 3, 3],\n    [0, 0, 0]\n  ],\n  J: [\n    [4, 0, 0],\n    [4, 4, 4],\n    [0, 0, 0]\n  ],\n  I: [\n    [0, 5, 0, 0],\n    [0, 5, 0, 0],\n    [0, 5, 0, 0],\n    [0, 5, 0, 0]\n  ],\n  S: [\n    [0, 6, 6],\n    [6, 6, 0],\n    [0, 0, 0]\n  ],\n  Z: [\n    [7, 7, 0],\n    [0, 7, 7],\n    [0, 0, 0]\n  ]\n}\n\n// 方块颜色映射\nconst COLORS = [\n  null,\n  '#FF0D72', // T\n  '#0DC2FF', // O\n  '#0DFF72', // L\n  '#F538FF', // J\n  '#FF8E0D', // I\n  '#FFE138', // S\n  '#3877FF'  // Z\n]\n\n// 初始化游戏区域\nconst createMatrix = (width: number, height: number): number[][] => {\n  const matrix: number[][] = []\n  while (height--) {\n    matrix.push(new Array(width).fill(0))\n  }\n  return matrix\n}\n\n// 创建随机方块\nconst createPiece = (): number[][] => {\n  const pieces = 'TOLJISZ'\n  const rand = pieces[Math.floor(Math.random() * pieces.length)] as keyof typeof PIECES\n  return JSON.parse(JSON.stringify(PIECES[rand]))\n}\n\n// 旋转矩阵\nconst rotate = (matrix: number[][]): number[][] => {\n  // 确保矩阵不为空\n  if (matrix.length === 0 || !matrix[0] || matrix[0].length === 0) {\n    return matrix;\n  }\n  \n  // 创建矩阵的转置\n  const rotated: number[][] = [];\n  \n  // 初始化转置矩阵\n  for (let i = 0; i < matrix[0].length; i++) {\n    rotated[i] = new Array(matrix.length).fill(0);\n  }\n  \n  // 填充转置矩阵\n  for (let y = 0; y < matrix.length; y++) {\n    const row = matrix[y];\n    if (!row) continue;\n    \n    for (let x = 0; x < matrix[0].length; x++) {\n      if (row[x] !== undefined) {\n        const value = row[x];\n        const rotatedRow = rotated[x];\n        if (rotatedRow && value !== undefined) {\n          rotatedRow[matrix.length - 1 - y] = value;\n        }\n      }\n    }\n  }\n  \n  return rotated;\n}\n\n// 碰撞检测\nconst collide = (arena: number[][], player: { pos: { x: number; y: number }; matrix: number[][] }): boolean => {\n  const [m, o] = [player.matrix, player.pos]\n  for (let y = 0; y < m.length; ++y) {\n    const row = m[y];\n    if (!row) continue;\n    \n    for (let x = 0; x < (m[0] ? m[0].length : 0); ++x) {\n      if (row[x] !== 0) {\n        const arenaRow = arena[y + o.y];\n        if (arenaRow === undefined || \n            arenaRow[x + o.x] === undefined || \n            arenaRow[x + o.x] !== 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// 合并方块到游戏区域\nconst merge = (arena: number[][], player: { pos: { x: number; y: number }; matrix: number[][] }): void => {\n  player.matrix.forEach((row, y) => {\n    row.forEach((value, x) => {\n      if (value !== 0) {\n        const arenaRow = arena[y + player.pos.y];\n        if (arenaRow && arenaRow[x + player.pos.x] !== undefined) {\n          arenaRow[x + player.pos.x] = value;\n        }\n      }\n    })\n  })\n}\n\n// 清除满行\nconst arenaSweep = (): void => {\n  let rowCount = 1\n  outer: for (let y = arena.length - 1; y > 0; --y) {\n    for (let x = 0; x < (arena[0] ? arena[0].length : 0); ++x) {\n      const arenaRow = arena[y];\n      if (arenaRow && arenaRow[x] === 0) {\n        continue outer\n      }\n    }\n\n    if (arena[y]) {\n      const row = arena.splice(y, 1)[0]?.fill(0) || Array(arena[0]?.length || 0).fill(0)\n      arena.unshift(row)\n      ++y\n\n      score.value += rowCount * 10\n      rowCount *= 2\n    }\n  }\n}\n\n// 重置玩家\nconst playerReset = (): void => {\n  player.matrix = nextPiece\n  nextPiece = createPiece()\n  player.pos.y = 0\n  if (arena[0] && player.matrix[0]) {\n    player.pos.x = Math.floor((arena[0].length - player.matrix[0].length) / 2)\n  }\n  \n  // 检查游戏结束\n  if (collide(arena, player)) {\n    arena.forEach(row => row.fill(0))\n    score.value = 0\n    gameOver.value = true\n  }\n  \n  drawNextPiece()\n}\n\n// 玩家移动\nconst playerMove = (dir: number): void => {\n  player.pos.x += dir\n  if (collide(arena, player)) {\n    player.pos.x -= dir\n  }\n}\n\n// 玩家旋转\nconst playerRotate = (dir: number): void => {\n  const pos = player.pos.x\n  let offset = dir  // 使用传入的dir参数\n  const originalMatrix = player.matrix\n  player.matrix = rotate(player.matrix)\n  \n  while (collide(arena, player)) {\n    player.pos.x += offset\n    offset = -(offset + (offset > 0 ? 1 : -1))\n    const matrixWidth = player.matrix[0] ? player.matrix[0].length : 0\n    if (Math.abs(offset) > matrixWidth) {\n      player.matrix = originalMatrix\n      player.pos.x = pos\n      return\n    }\n  }\n}\n\n// 玩家下落\nconst playerDrop = (): void => {\n  player.pos.y++\n  if (collide(arena, player)) {\n    player.pos.y--\n    merge(arena, player)\n    playerReset()\n    arenaSweep()\n    dropInterval = DROP_INTERVAL\n  }\n  dropCounter = 0\n}\n\n// 玩家快速下落\nconst playerHardDrop = (): void => {\n  while (!collide(arena, player)) {\n    player.pos.y++\n  }\n  player.pos.y--\n  playerDrop()\n}\n\n// 绘制游戏区域\nconst drawMatrix = (matrix: number[][], offset: { x: number; y: number }, canvas: HTMLCanvasElement): void => {\n  const context = canvas.getContext('2d')\n  if (!context) return\n\n  matrix.forEach((row, y) => {\n    row.forEach((value, x) => {\n      if (value !== 0) {\n        context.fillStyle = COLORS[value] as string\n        context.fillRect((x + offset.x) * SCALE, (y + offset.y) * SCALE, SCALE, SCALE)\n        \n        // 添加黑色边框\n        context.strokeStyle = '#000'\n        context.strokeRect((x + offset.x) * SCALE, (y + offset.y) * SCALE, SCALE, SCALE)\n      }\n    })\n  })\n}\n\n// 绘制下一个方块\nconst drawNextPiece = (): void => {\n  const canvas = nextCanvas.value\n  if (!canvas) return\n  \n  const context = canvas.getContext('2d')\n  if (!context) return\n  \n  // 清空画布\n  context.fillStyle = '#000'\n  context.fillRect(0, 0, canvas.width, canvas.height)\n  \n  // 计算居中位置\n  const offsetX = nextPiece[0] ? (canvas.width / SCALE - nextPiece[0].length) / 2 : 0\n  const offsetY = (canvas.height / SCALE - nextPiece.length) / 2\n  \n  // 绘制方块\n  drawMatrix(nextPiece, { x: offsetX, y: offsetY }, canvas)\n}\n\n// 绘制游戏\nconst draw = (): void => {\n  const canvas = tetrisCanvas.value\n  if (!canvas) return\n  \n  const context = canvas.getContext('2d')\n  if (!context) return\n  \n  // 清空画布\n  context.fillStyle = '#000'\n  context.fillRect(0, 0, canvas.width, canvas.height)\n  \n  // 绘制游戏区域\n  drawMatrix(arena, { x: 0, y: 0 }, canvas)\n  drawMatrix(player.matrix, player.pos, canvas)\n}\n\n// 更新游戏状态\nconst update = (time = 0): void => {\n  if (gameOver.value) return\n  \n  const deltaTime = time - lastTime\n  lastTime = time\n\n  dropCounter += deltaTime\n  if (dropCounter > dropInterval) {\n    playerDrop()\n  }\n\n  draw()\n  requestAnimationFrame(update)\n}\n\n// 初始化游戏\nconst init = (): void => {\n  arena = createMatrix(ARENA_WIDTH, ARENA_HEIGHT)\n  \n  player.score = 0\n  player.pos = { x: 0, y: 0 }\n  player.matrix = createPiece()\n  \n  nextPiece = createPiece()\n  \n  gameOver.value = false\n  score.value = 0\n  \n  drawNextPiece()\n}\n\n// 处理键盘事件\nconst handleKeyDown = (e: KeyboardEvent): void => {\n  if (gameOver.value) return\n  \n  switch (e.key) {\n    case 'ArrowLeft':\n      playerMove(-1)\n      break\n    case 'ArrowRight':\n      playerMove(1)\n      break\n    case 'ArrowDown':\n      playerDrop()\n      break\n    case 'ArrowUp':\n      playerRotate(1)\n      break\n    case 'q':\n      playerRotate(-1)\n      break\n    case 'w':\n      playerRotate(1)\n      break\n    case ' ':\n      playerHardDrop()\n      break\n  }\n}\n\n// 触摸事件处理\nlet touchStartX = 0\nlet touchStartY = 0\nlet touchTimeStart = 0\n\nconst handleTouchStart = (e: TouchEvent): void => {\n  if (gameOver.value) return\n  \n  const touch = e.touches[0]\n  if (touch) {\n    touchStartX = touch.clientX\n    touchStartY = touch.clientY\n    touchTimeStart = Date.now()\n  }\n}\n\nconst handleTouchMove = (e: TouchEvent): void => {\n  if (gameOver.value) return\n  e.preventDefault() // 防止页面滚动\n  \n  if (e.touches.length > 0) {\n    const touch = e.touches[0]\n    if (!touch) return\n    \n    const diffX = touch.clientX - touchStartX\n    const diffY = touch.clientY - touchStartY\n    const currentTime = Date.now()\n    \n    // 水平滑动控制左右移动\n    if (Math.abs(diffX) > 30) { // 至少滑动30px才触发\n      if (diffX > 0) {\n        playerMove(1) // 右移\n      } else {\n        playerMove(-1) // 左移\n      }\n      // 重置起始点，避免连续触发\n      touchStartX = touch.clientX\n      touchStartY = touch.clientY\n    }\n    \n    // 垂直向下滑动控制下落\n    if (diffY > 50) { // 向下滑动超过50px\n      playerDrop()\n      touchStartY = touch.clientY\n    }\n    \n    // 垂直向上滑动控制旋转\n    if (diffY < -50) { // 向上滑动超过50px\n      playerRotate(1)\n      touchStartY = touch.clientY\n    }\n    \n    // 快速下滑触发硬降落\n    if (diffY > 100 && (currentTime - touchTimeStart) < 300) { // 快速向下滑动超过100px\n      playerHardDrop()\n      touchStartY = touch.clientY\n    }\n  }\n}\n\n// 重置游戏\nconst resetGame = (): void => {\n  init()\n  gameOver.value = false\n  requestAnimationFrame(update)\n}\n\nonMounted(() => {\n  init()\n  \n  window.addEventListener('keydown', handleKeyDown)\n  requestAnimationFrame(update)\n})\n\nonUnmounted(() => {\n  window.removeEventListener('keydown', handleKeyDown)\n})\n</script>\n\n<style scoped>\n.tetris-game {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #222;\n  height: 100%;\n  position: relative;\n  padding: 20px;\n  box-sizing: border-box;\n  min-height: 100vh;\n}\n\n.game-info {\n  position: static;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  color: #fff;\n  z-index: 10;\n  text-align: center;\n  background-color: rgba(0, 0, 0, 0.7);\n  padding: 10px 20px;\n  border-radius: 5px;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 600px;\n  box-sizing: border-box;\n}\n\n.next-piece {\n  border: 1px solid #000;\n  background-color: #000;\n  margin: 10px auto;\n}\n\n.game-canvas {\n  border: 1px solid #000;\n  background-color: #000;\n  margin: auto;\n  max-width: 100%;\n  height: auto;\n}\n\nbutton {\n  margin-top: 10px;\n  padding: 5px 10px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n/* 移动端适配 */\n@media (max-width: 768px) {\n  .tetris-game {\n    padding: 10px;\n  }\n  \n  .game-info {\n    padding: 8px 15px;\n    font-size: 14px;\n  }\n  \n  .game-canvas {\n    width: 100%;\n    max-width: 350px;\n    height: auto;\n  }\n  \n  .next-piece {\n    width: 100px;\n    height: 100px;\n  }\n}\n\n@media (max-width: 480px) {\n  .tetris-game {\n    padding: 5px;\n  }\n  \n  .game-info {\n    padding: 6px 10px;\n    font-size: 12px;\n  }\n  \n  .game-canvas {\n    width: 100%;\n    max-width: 300px;\n    height: auto;\n  }\n  \n  .next-piece {\n    width: 80px;\n    height: 80px;\n  }\n}\n\n.mobile-controls {\n  display: none;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 20px;\n  width: 100%;\n  max-width: 600px;\n}\n\n.touch-instructions {\n  margin-top: 15px;\n  padding: 10px;\n  background-color: rgba(0, 0, 0, 0.7);\n  border-radius: 5px;\n  font-size: 0.9em;\n  border: 1px solid #4CAF50;\n}\n\n.touch-instructions p {\n  margin: 5px 0;\n  font-size: 12px;\n}\n\n.mobile-controls button {\n  padding: 15px;\n  font-size: 16px;\n  cursor: pointer;\n  border: none;\n  border-radius: 4px;\n  background-color: #4CAF50;\n  color: white;\n  transition: background-color 0.3s ease;\n}\n\n.mobile-controls button:hover {\n  background-color: #45a049;\n}\n\n/* 在移动端显示控制按钮 */\n@media (max-width: 768px) {\n  .mobile-controls {\n    display: grid;\n  }\n  \n  .mobile-controls {\n    grid-template-columns: repeat(3, 1fr);\n    width: 100%;\n    max-width: 350px;\n  }\n  \n  .mobile-controls button {\n    padding: 12px;\n    font-size: 14px;\n  }\n}\n\n@media (max-width: 480px) {\n  .mobile-controls {\n    grid-template-columns: repeat(2, 1fr);\n    max-width: 300px;\n  }\n  \n  .mobile-controls button {\n    padding: 10px;\n    font-size: 12px;\n  }\n}\n</style>\n"],"names":["ARENA_WIDTH","ARENA_HEIGHT","SCALE","DROP_INTERVAL","tetrisCanvas","ref","nextCanvas","score","gameOver","isMobile","computed","arena","player","nextPiece","dropCounter","dropInterval","lastTime","PIECES","COLORS","createMatrix","width","height","matrix","createPiece","pieces","rand","rotate","rotated","i","y","row","x","value","rotatedRow","collide","m","o","arenaRow","merge","arenaSweep","rowCount","outer","playerReset","drawNextPiece","playerMove","dir","playerRotate","pos","offset","originalMatrix","matrixWidth","playerDrop","playerHardDrop","drawMatrix","canvas","context","offsetX","offsetY","draw","update","time","deltaTime","init","handleKeyDown","touchStartX","touchStartY","touchTimeStart","handleTouchStart","touch","handleTouchMove","diffX","diffY","currentTime","resetGame","onMounted","onUnmounted","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","_cache","_hoisted_4","_hoisted_5"],"mappings":"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"}