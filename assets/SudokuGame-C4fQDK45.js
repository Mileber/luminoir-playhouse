import{d as T,a as k,r as q,o as H,i as L,b as m,e as d,f as b,k as K,v as Q,F as w,g as C,n as B,t as M,h as p,_ as W}from"./index-LnyyPkwa.js";class X{generateCompleteBoard(){const o=Array(9).fill(0).map(()=>Array(9).fill(0));return this.solveSudoku(o),o}generatePuzzle(o){const s=this.generateCompleteBoard();let t;switch(o){case"easy":t=40;break;case"medium":t=50;break;case"hard":t=60;break;default:t=40}const n=JSON.parse(JSON.stringify(s));return this.digHoles(n,t),n}solveSudoku(o){for(let s=0;s<9;s++)for(let t=0;t<9;t++)if(o[s]?.[t]===0){const n=this.shuffleArray([1,2,3,4,5,6,7,8,9]);for(const a of n)if(this.isValidPlacement(o,s,t,a)){if(o[s][t]=a,this.solveSudoku(o))return!0;o[s][t]=0}return!1}return!0}isValidPlacement(o,s,t,n){for(let f=0;f<9;f++)if(o[s]?.[f]===n)return!1;for(let f=0;f<9;f++)if(o[f]?.[t]===n)return!1;const a=Math.floor(s/3)*3,u=Math.floor(t/3)*3;for(let f=0;f<3;f++)for(let z=0;z<3;z++)if(o[a+f]?.[u+z]===n)return!1;return!0}digHoles(o,s){const t=[];for(let a=0;a<9;a++)for(let u=0;u<9;u++)t.push([a,u]);this.shuffleArray(t);let n=0;for(const[a,u]of t){if(n>=s)break;if(!o[a]||o[a][u]===void 0)continue;const f=o[a][u];o[a][u]=0,this.hasUniqueSolution(JSON.parse(JSON.stringify(o)))?n++:o[a][u]=f}}hasUniqueSolution(o){return this.countSolutions(JSON.parse(JSON.stringify(o)))===1}countSolutions(o,s=2){for(let t=0;t<9;t++)for(let n=0;n<9;n++)if(o[t]?.[n]===0){let a=0;for(let u=1;u<=9;u++)if(this.isValidPlacement(o,t,n,u)){if(o[t][n]=u,a+=this.countSolutions(o,s),a>=s)return a;o[t][n]=0}return a}return 1}shuffleArray(o){const s=[...o];for(let t=s.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[s[t],s[n]]=[s[n],s[t]]}return s}}class Y{generator;puzzles;maxPuzzlesPerDifficulty;constructor(o=5){this.generator=new X,this.puzzles=new Map,this.maxPuzzlesPerDifficulty=o,this.puzzles.set("easy",[]),this.puzzles.set("medium",[]),this.puzzles.set("hard",[])}preGeneratePuzzles(){console.log("开始预生成数独题目...");const o=["easy","medium","hard"];for(const s of o){const t=this.puzzles.get(s)||[];for(;t.length<this.maxPuzzlesPerDifficulty;)try{console.log(`生成${s}难度题目 (${t.length+1}/${this.maxPuzzlesPerDifficulty})`);const n=this.generator.generatePuzzle(s);t.push(n)}catch(n){console.error(`生成${s}难度题目时出错:`,n);break}this.puzzles.set(s,t)}console.log("数独题目预生成完成")}getRandomPuzzle(o){const s=this.puzzles.get(o)||[];if(s.length===0)return console.warn(`没有预生成的${o}难度题目，实时生成一个`),this.generator.generatePuzzle(o);const t=Math.floor(Math.random()*s.length);return JSON.parse(JSON.stringify(s[t]))}getPuzzleBankStatus(){const o={};for(const[s,t]of this.puzzles.entries())o[s]=t.length;return o}}const Z={class:"sudoku-game"},x={class:"container"},I={class:"game-info"},ee={class:"difficulty-selector"},te={key:0,class:"loading"},le={key:1,class:"sudoku-board"},oe=["onClick"],se={key:2,class:"number-input"},re={class:"number-row"},ae=["onClick"],ue={key:3,class:"message success"},ne=T({name:"SudokuGame",__name:"SudokuGame",setup(P){const o=k("easy"),s=k([]),t=k([]),n=k([]),a=k([]),u=q({row:-1,col:-1}),f=k(!1),z=k(!0),S=new Y(5),D=()=>{a.value=Array(9).fill(null).map(()=>Array(9).fill(!1))},G=(l,e)=>u.row===l&&u.col===e,R=(l,e)=>{s.value[l]?.[e]===0&&(u.row=l,u.col=e)},A=l=>{if(u.row===-1||u.col===-1)return;const e=u.row,r=u.col;s.value[e]?.[r]===0&&(t.value[e]&&(t.value[e][r]=l),a.value[e]&&(a.value[e][r]=!1),F())},$=()=>{if(u.row===-1||u.col===-1)return;const l=u.row,e=u.col;s.value[l]?.[e]===0&&(t.value[l]&&(t.value[l][e]=0),a.value[l]&&(a.value[l][e]=!1))},E=()=>{N();let l=!1;for(let e=0;e<9;e++)for(let r=0;r<9;r++){const i=t.value[e]?.[r];i!==void 0&&i!==0&&!y(t.value,e,r,i)&&(a.value[e]?.[r]!==void 0&&(a.value[e][r]=!0),l=!0)}for(let e=0;e<9;e++)for(let r=0;r<9;r++){const i=t.value[r]?.[e];i!==void 0&&i!==0&&!y(t.value,r,e,i)&&(a.value[r]?.[e]!==void 0&&(a.value[r][e]=!0),l=!0)}for(let e=0;e<3;e++)for(let r=0;r<3;r++){const i=e*3,g=r*3;for(let v=i;v<i+3;v++)for(let c=g;c<g+3;c++){const h=t.value[v]?.[c];h!==void 0&&h!==0&&!y(t.value,v,c,h)&&(a.value[v]?.[c]!==void 0&&(a.value[v][c]=!0),l=!0)}}alert(l?"发现错误，请检查标红的数字。":"所有数字都正确放置！")},N=()=>{for(let l=0;l<9;l++)if(a.value[l])for(let e=0;e<9;e++)a.value[l]?.[e]!==void 0&&(a.value[l][e]=!1)},F=()=>{for(let l=0;l<9;l++)for(let e=0;e<9;e++){const r=t.value[l]?.[e];if(r===void 0||r===0){f.value=!1;return}if(!y(t.value,l,e,r)){f.value=!1;return}}f.value=!0},y=(l,e,r,i)=>{for(let c=0;c<9;c++){const h=l[e]?.[c];if(c!==r&&h!==void 0&&h===i)return!1}for(let c=0;c<9;c++){const h=l[c]?.[r];if(c!==e&&h!==void 0&&h===i)return!1}const g=Math.floor(e/3)*3,v=Math.floor(r/3)*3;for(let c=0;c<3;c++)for(let h=0;h<3;h++){const V=g+c,J=v+h,O=l[V]?.[J];if(V!==e&&J!==r&&O!==void 0&&O===i)return!1}return!0},U=()=>{for(let l=0;l<9;l++)for(let e=0;e<9;e++)s.value[l]?.[e]===0&&t.value[l]?.[e]!==void 0&&(t.value[l][e]=0);N(),f.value=!1,u.row=-1,u.col=-1},_=()=>{z.value=!0,setTimeout(()=>{try{const l=S.getRandomPuzzle(o.value);s.value=JSON.parse(JSON.stringify(l)),t.value=JSON.parse(JSON.stringify(l)),n.value=JSON.parse(JSON.stringify(l)),D(),f.value=!1,u.row=-1,u.col=-1}catch(l){console.error("获取新题目时出错:",l),alert("生成新题目时出错，请重试")}finally{z.value=!1}},0)},j=()=>{z.value=!0,console.log("开始预生成题目..."),setTimeout(()=>{try{S.preGeneratePuzzles(),console.log("题目预生成状态:",S.getPuzzleBankStatus()),z.value=!1,_()}catch(l){console.error("预生成题目时出错:",l),z.value=!1,alert("预生成题目时出错，请重试")}},0)};return H(()=>{j()}),L(()=>{}),(l,e)=>(p(),m("div",Z,[d("div",x,[e[3]||(e[3]=d("h1",null,"数独游戏",-1)),d("div",I,[d("div",ee,[e[2]||(e[2]=d("label",null,"难度:",-1)),K(d("select",{"onUpdate:modelValue":e[0]||(e[0]=r=>o.value=r),onChange:_},[...e[1]||(e[1]=[d("option",{value:"easy"},"简单",-1),d("option",{value:"medium"},"中等",-1),d("option",{value:"hard"},"困难",-1)])],544),[[Q,o.value]])]),d("div",{class:"controls"},[d("button",{onClick:E,class:"check-btn"},"检查答案"),d("button",{onClick:_,class:"new-game-btn"},"新游戏"),d("button",{onClick:U,class:"reset-btn"},"重置")])]),z.value?(p(),m("div",te," 正在生成新的题目，请稍候... ")):(p(),m("div",le,[(p(!0),m(w,null,C(t.value,(r,i)=>(p(),m("div",{key:i,class:B(["sudoku-row",{"thick-bottom":(i+1)%3===0&&i!==8}])},[(p(!0),m(w,null,C(r,(g,v)=>(p(),m("div",{key:v,class:B(["sudoku-cell",{fixed:s.value[i]?.[v]!==0,"user-input":s.value[i]?.[v]===0,selected:G(i,v),"thick-right":(v+1)%3===0&&v!==8,error:a.value[i]?.[v]}]),onClick:c=>R(i,v)},M(g!==0?g:""),11,oe))),128))],2))),128))])),z.value?b("",!0):(p(),m("div",se,[d("div",re,[(p(),m(w,null,C(9,r=>d("button",{key:r,onClick:i=>A(r),class:"number-btn"},M(r),9,ae)),64)),d("button",{onClick:$,class:"clear-btn"},"清除")])])),f.value?(p(),m("div",ue," 恭喜！你完成了数独游戏！ ")):b("",!0)])]))}}),ce=W(ne,[["__scopeId","data-v-c05f1897"]]);export{ce as default};
//# sourceMappingURL=SudokuGame-C4fQDK45.js.map
