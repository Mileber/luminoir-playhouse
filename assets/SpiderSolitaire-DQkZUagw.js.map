{"version":3,"file":"SpiderSolitaire-DQkZUagw.js","sources":["../../src/components/games/SpiderSolitaire.vue"],"sourcesContent":["<template>\n  <div class=\"spider-solitaire\">\n    <h1>蜘蛛纸牌</h1>\n    \n    <div class=\"game-info\">\n      <div>剩余牌堆: {{ remainingStockDeals }}</div>\n      <div>完成: {{ completedPiles }}/8</div>\n      <button @click=\"newGame\">新游戏</button>\n    </div>\n    \n    <div class=\"game-area\">\n      <!-- 备用牌堆 -->\n      <div class=\"stock-area\">\n        <div \n          class=\"stock-pile\" \n          @click=\"dealCards\"\n          :class=\"{ 'disabled': remainingStockDeals === 0 }\"\n        >\n          <div v-if=\"remainingStockDeals > 0\" class=\"card back\"></div>\n          <div v-if=\"remainingStockDeals > 1\" class=\"card back offset-1\"></div>\n          <div v-if=\"remainingStockDeals > 2\" class=\"card back offset-2\"></div>\n        </div>\n      </div>\n      \n      <!-- 完成牌堆区域 -->\n      <div class=\"foundation-area\">\n        <div \n          v-for=\"n in completedPiles\" \n          :key=\"n\" \n          class=\"completed-pile\"\n        >\n          <div class=\"card back completed\"></div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- 游戏列区域 -->\n    <div class=\"tableau\">\n      <div \n        v-for=\"(column, colIndex) in tableau\" \n        :key=\"colIndex\" \n        class=\"tableau-column\"\n        @drop=\"onDrop(colIndex, $event)\"\n        @dragover.prevent\n      >\n        <div \n          v-for=\"(card, cardIndex) in column\" \n          :key=\"`${colIndex}-${cardIndex}`\"\n          :class=\"['card', { 'back': !card.faceUp, 'selected': selectedCard && selectedCard.colIndex === colIndex && selectedCard.cardIndex === cardIndex }]\"\n          :data-col=\"colIndex\"\n          :data-index=\"cardIndex\"\n          :draggable=\"card.faceUp\"\n          @dragstart=\"onDragStart(colIndex, cardIndex, $event)\"\n          @click=\"onCardClick(colIndex, cardIndex)\"\n        >\n          <div v-if=\"card.faceUp\" class=\"card-face\">\n            <span class=\"card-value\" :class=\"getSuitClass(card.suit)\">{{ getCardValue(card.value) }}</span>\n            <span class=\"card-suit\" :class=\"getSuitClass(card.suit)\">{{ getSuitSymbol(card.suit) }}</span>\n          </div>\n        </div>\n        \n        <!-- 空列占位符 -->\n        <div v-if=\"column.length === 0\" class=\"empty-slot\" @drop=\"onDrop(colIndex, $event)\" @dragover.prevent></div>\n      </div>\n    </div>\n    \n    <!-- 胜利提示 -->\n    <div v-if=\"gameWon\" class=\"win-overlay\">\n      <div class=\"win-message\">\n        <h2>恭喜获胜!</h2>\n        <button @click=\"newGame\">再玩一局</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\n\n// 定义花色枚举\nenum Suit {\n  SPADES = 'spades',     // 黑桃\n  HEARTS = 'hearts',     // 红桃\n  DIAMONDS = 'diamonds', // 方块\n  CLUBS = 'clubs'        // 梅花\n}\n\n// 定义牌面值枚举\nenum CardValue {\n  ACE = 1,\n  TWO,\n  THREE,\n  FOUR,\n  FIVE,\n  SIX,\n  SEVEN,\n  EIGHT,\n  NINE,\n  TEN,\n  JACK,\n  QUEEN,\n  KING\n}\n\n// 定义卡牌接口\ninterface Card {\n  suit: Suit\n  value: CardValue\n  faceUp: boolean\n}\n\n// 定义列类型\ntype Column = Card[]\n\n// 游戏状态\nconst tableau = ref<Column[]>(Array(10).fill(null).map(() => []))\nconst stock = ref<Card[]>([])\nconst remainingStockDeals = ref(5) // 剩余发牌次数\nconst completedPiles = ref(0) // 已完成的牌堆数\nconst gameWon = ref(false)\n\n// 移动端选中状态\nconst selectedCard = ref<{\n  colIndex: number\n  cardIndex: number\n} | null>(null)\n\n// 拖拽状态\nconst dragState = ref({\n  fromColumn: -1,\n  fromIndex: -1\n})\n\n// 创建一副牌\nconst createDeck = (): Card[] => {\n  const deck: Card[] = []\n  \n  // 蜘蛛纸牌使用两副牌\n  for (let i = 0; i < 2; i++) {\n    for (const suit of Object.values(Suit)) {\n      for (let value = CardValue.ACE; value <= CardValue.KING; value++) {\n        deck.push({\n          suit,\n          value,\n          faceUp: false\n        })\n      }\n    }\n  }\n  \n  return deck\n}\n\n// 洗牌\nconst shuffleDeck = (deck: Card[]): Card[] => {\n  const shuffled = [...deck]\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // 使用类型断言确保元素存在\n    [shuffled[i], shuffled[j]] = [shuffled[j]!, shuffled[i]!]\n  }\n  return shuffled\n}\n\n// 初始化游戏\nconst initGame = () => {\n  // 重置游戏状态\n  tableau.value = Array(10).fill(null).map(() => [])\n  stock.value = []\n  remainingStockDeals.value = 5\n  completedPiles.value = 0\n  gameWon.value = false\n  \n  // 创建并洗牌\n  let deck = createDeck()\n  deck = shuffleDeck(deck)\n  \n  // 发牌到10列\n  // 前4列每列6张牌，后6列每列5张牌\n  for (let col = 0; col < 10; col++) {\n    const cardsInColumn = col < 4 ? 6 : 5\n    for (let row = 0; row < cardsInColumn; row++) {\n      const card = deck.pop()!\n      // 只有最上面的牌是正面朝上的\n      card.faceUp = (row === cardsInColumn - 1)\n      if (tableau.value[col]) {\n        tableau.value[col]!.push(card)\n      }\n    }\n  }\n  \n  // 剩余的50张牌放入备用牌堆\n  stock.value = deck\n}\n\n// 发牌\nconst dealCards = () => {\n  if (remainingStockDeals.value <= 0 || stock.value.length === 0) {\n    return\n  }\n  \n  // 每列发一张牌\n  for (let col = 0; col < 10; col++) {\n    if (stock.value.length > 0 && tableau.value[col]) {\n      const card = stock.value.pop()!\n      card.faceUp = true\n      tableau.value[col]!.push(card)\n    }\n  }\n  \n  remainingStockDeals.value--\n  \n  // 检查是否有可以自动完成的牌组\n  checkForCompletedSequences()\n}\n\n// 获取卡牌显示值\nconst getCardValue = (value: CardValue): string => {\n  switch (value) {\n    case CardValue.ACE: return 'A'\n    case CardValue.JACK: return 'J'\n    case CardValue.QUEEN: return 'Q'\n    case CardValue.KING: return 'K'\n    default: return value.toString()\n  }\n}\n\n// 获取花色CSS类\nconst getSuitClass = (suit: Suit): string => {\n  switch (suit) {\n    case Suit.HEARTS:\n    case Suit.DIAMONDS:\n      return 'card-red'\n    case Suit.SPADES:\n    case Suit.CLUBS:\n      return 'card-black'\n    default:\n      return ''\n  }\n}\n\n// 获取花色符号\nconst getSuitSymbol = (suit: Suit): string => {\n  switch (suit) {\n    case Suit.HEARTS:\n      return '♥'\n    case Suit.DIAMONDS:\n      return '♦'\n    case Suit.SPADES:\n      return '♠'\n    case Suit.CLUBS:\n      return '♣'\n    default:\n      return ''\n  }\n}\n\n// 拖拽开始\nconst onDragStart = (colIndex: number, cardIndex: number, event: DragEvent) => {\n  // 只能拖拽正面朝上的牌\n  const card = tableau.value[colIndex]?.[cardIndex]\n  if (!card || !card.faceUp) {\n    event.preventDefault()\n    return\n  }\n  \n  // 检查从这张牌开始是否可以移动整组牌\n  if (!canMoveSequence(colIndex, cardIndex)) {\n    event.preventDefault()\n    return\n  }\n  \n  dragState.value = {\n    fromColumn: colIndex,\n    fromIndex: cardIndex\n  }\n  \n  // 设置拖拽数据\n  event.dataTransfer?.setData('text/plain', `${colIndex},${cardIndex}`)\n  event.dataTransfer!.effectAllowed = 'move'\n}\n\n// 检查是否可以移动从指定位置开始的牌序列\nconst canMoveSequence = (colIndex: number, startIndex: number): boolean => {\n  const column = tableau.value[colIndex]\n  if (!column) return false\n  \n  // 检查序列是否按降序排列\n  for (let i = startIndex; i < column.length - 1; i++) {\n    const card1 = column[i]\n    const card2 = column[i + 1]\n    \n    // 当前牌应该比下一张牌大1\n    if (card1 && card2 && card1.value !== card2.value + 1) {\n      return false\n    }\n    \n    // 牌必须是正面朝上的\n    if (card2 && !card2.faceUp) {\n      return false\n    }\n  }\n  \n  return true\n}\n\n// 拖拽放置\nconst onDrop = (colIndex: number, event: DragEvent) => {\n  event.preventDefault()\n  \n  const fromCol = dragState.value.fromColumn\n  const fromIndex = dragState.value.fromIndex\n  \n  if (fromCol === -1 || fromIndex === -1) {\n    return\n  }\n  \n  moveCards(fromCol, fromIndex, colIndex)\n}\n\n// 移动牌组\nconst moveCards = (fromCol: number, fromIndex: number, toCol: number) => {\n  // 不能移动到同一列\n  if (fromCol === toCol) {\n    return\n  }\n  \n  const fromColumn = tableau.value[fromCol]\n  const toColumn = tableau.value[toCol]\n  \n  if (!fromColumn || !toColumn) {\n    return\n  }\n  \n  // 检查移动是否合法\n  if (!isValidMove(fromCol, fromIndex, toCol)) {\n    return\n  }\n  \n  // 移动牌组\n  const cardsToMove = fromColumn.splice(fromIndex)\n  tableau.value[toCol] = [...toColumn, ...cardsToMove]\n  \n  // 翻开新牌\n  if (fromColumn.length > 0) {\n    const lastCard = fromColumn[fromColumn.length - 1]\n    if (lastCard && !lastCard.faceUp) {\n      lastCard.faceUp = true\n    }\n  }\n  \n  // 检查是否有可以自动完成的牌组\n  checkForCompletedSequences()\n  \n  // 检查游戏是否胜利\n  checkWinCondition()\n}\n\n// 检查移动是否合法\nconst isValidMove = (fromCol: number, fromIndex: number, toCol: number): boolean => {\n  const fromColumn = tableau.value[fromCol]\n  const toColumn = tableau.value[toCol]\n  \n  if (!fromColumn || !toColumn) {\n    return false\n  }\n  \n  // 检查源列是否有牌\n  if (fromIndex >= fromColumn.length) {\n    return false\n  }\n  \n  const movingCard = fromColumn[fromIndex]\n  if (!movingCard) {\n    return false\n  }\n  \n  // 如果目标列为空，可以放置任何牌\n  if (toColumn.length === 0) {\n    return true\n  }\n  \n  const targetCard = toColumn[toColumn.length - 1]\n  if (!targetCard) {\n    return false\n  }\n  \n  // 目标牌必须是正面朝上的\n  if (!targetCard.faceUp) {\n    return false\n  }\n  \n  // 移动的牌必须比目标牌小1\n  return movingCard.value === targetCard.value - 1\n}\n\n// 检查是否有可以自动完成的牌组\nconst checkForCompletedSequences = () => {\n  for (let colIndex = 0; colIndex < tableau.value.length; colIndex++) {\n    const column = tableau.value[colIndex]\n    \n    if (!column) continue\n    \n    // 检查是否有完整的K到A序列（同一花色）\n    if (column.length >= 13) {\n      let isCompleteSequence = true\n      let suit: Suit | null = null\n      \n      // 检查最后13张牌是否是K到A的序列\n      for (let i = 0; i < 13; i++) {\n        const cardIndex = column.length - 13 + i\n        const card = column[cardIndex]\n        \n        if (!card) {\n          isCompleteSequence = false\n          break\n        }\n        \n        // 必须是正面朝上的牌\n        if (!card.faceUp) {\n          isCompleteSequence = false\n          break\n        }\n        \n        // 检查数值是否正确（K到A）\n        if (card.value !== CardValue.KING - i) {\n          isCompleteSequence = false\n          break\n        }\n        \n        // 检查花色是否一致\n        if (suit === null) {\n          suit = card.suit\n        } else if (card.suit !== suit) {\n          isCompleteSequence = false\n          break\n        }\n      }\n      \n      // 如果是完整序列，移除它\n      if (isCompleteSequence) {\n        column.splice(column.length - 13, 13)\n        completedPiles.value++\n        \n        // 翻开新牌\n        if (column.length > 0) {\n          const lastCard = column[column.length - 1]\n          if (lastCard && !lastCard.faceUp) {\n            lastCard.faceUp = true\n          }\n        }\n        \n        // 递归检查是否还有其他完成的序列\n        checkForCompletedSequences()\n        return\n      }\n    }\n  }\n}\n\n// 检查游戏胜利条件\nconst checkWinCondition = () => {\n  // 完成8个牌堆即获胜\n  if (completedPiles.value === 8) {\n    gameWon.value = true\n  }\n}\n\n// 卡牌点击事件（用于移动端）\nconst onCardClick = (colIndex: number, cardIndex: number) => {\n  // 忽略背面朝上的卡牌\n  const card = tableau.value[colIndex]?.[cardIndex]\n  if (!card || !card.faceUp) {\n    // 取消选中\n    selectedCard.value = null\n    return\n  }\n\n  // 如果没有选中任何卡牌，选中当前卡牌\n  if (!selectedCard.value) {\n    // 检查从这张牌开始是否可以移动整组牌\n    if (canMoveSequence(colIndex, cardIndex)) {\n      selectedCard.value = { colIndex, cardIndex }\n    }\n    return\n  }\n\n  // 如果点击的是已选中的卡牌，取消选中\n  if (selectedCard.value.colIndex === colIndex && selectedCard.value.cardIndex === cardIndex) {\n    selectedCard.value = null\n    return\n  }\n\n  // 如果点击的是同一列中的卡牌，且在选中卡牌的上方，更新选中位置\n  if (selectedCard.value.colIndex === colIndex && cardIndex > selectedCard.value.cardIndex) {\n    // 检查从新位置开始是否可以移动整组牌\n    if (canMoveSequence(colIndex, cardIndex)) {\n      selectedCard.value = { colIndex, cardIndex }\n    }\n    return\n  }\n\n  // 尝试移动选中的卡牌到目标位置\n  const targetColumn = tableau.value[colIndex]\n  if (targetColumn && isValidMove(selectedCard.value.colIndex, selectedCard.value.cardIndex, colIndex)) {\n    moveCards(selectedCard.value.colIndex, selectedCard.value.cardIndex, colIndex)\n    selectedCard.value = null\n  } else {\n    // 如果不能移动到目标位置，取消选中\n    selectedCard.value = null\n  }\n}\n\n// 新游戏\nconst newGame = () => {\n  initGame()\n}\n\n// 初始化游戏\nonMounted(() => {\n  initGame()\n})\n</script>\n\n<style scoped>\n.spider-solitaire {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n}\n\n.game-info {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 20px;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.game-info button {\n  padding: 8px 16px;\n  font-size: 16px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: #f5f5f5;\n}\n\n.game-info button:hover {\n  background-color: #e0e0e0;\n}\n\n.game-area {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 20px;\n}\n\n.stock-area {\n  display: flex;\n  align-items: center;\n}\n\n.stock-pile {\n  position: relative;\n  width: 80px;\n  height: 110px;\n  cursor: pointer;\n}\n\n.stock-pile.disabled {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n\n.foundation-area {\n  display: flex;\n  gap: 10px;\n}\n\n.completed-pile {\n  width: 80px;\n  height: 110px;\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n}\n\n.tableau {\n  display: flex;\n  gap: 10px;\n  width: 100%;\n  max-width: 1000px;\n  margin-top: 20px;\n}\n\n.tableau-column {\n  flex: 1;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.card {\n  width: 80px;\n  height: 110px;\n  border: 1px solid #333;\n  border-radius: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: -80px;\n  background-color: white;\n  position: relative;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  transition: transform 0.2s;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n}\n\n.card.back {\n  background: linear-gradient(135deg, #0062ff, #00a8ff);\n  cursor: pointer;\n}\n\n.card.selected {\n  box-shadow: 0 0 0 2px #4caf50, 0 0 10px #4caf50;\n  transform: translateY(-10px);\n}\n\n.card.back::before {\n  content: \"♠\";\n  color: white;\n  font-size: 24px;\n}\n\n.card .card-face {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  padding: 4px;\n  box-sizing: border-box;\n  font-weight: bold;\n  font-size: 18px;\n}\n\n.card .card-face span {\n  text-align: center;\n}\n\n.card-value {\n  align-self: flex-start;\n}\n\n.card-suit {\n  font-size: 24px;\n  align-self: flex-end;\n}\n\n.card-red {\n  color: #e74c3c;\n}\n\n.card-black {\n  color: #2c3e50;\n}\n\n.empty-slot {\n  width: 80px;\n  height: 110px;\n  border: 2px dashed #ccc;\n  border-radius: 6px;\n  margin-bottom: 20px;\n}\n\n.win-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.win-message {\n  background-color: white;\n  padding: 30px;\n  border-radius: 10px;\n  text-align: center;\n}\n\n.win-message h2 {\n  margin-top: 0;\n}\n\n.win-message button {\n  padding: 10px 20px;\n  font-size: 16px;\n  margin: 10px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: #4caf50;\n  color: white;\n}\n\n.offset-1 {\n  position: absolute;\n  top: 2px;\n  left: 2px;\n}\n\n.offset-2 {\n  position: absolute;\n  top: 4px;\n  left: 4px;\n}\n\n/* 移动端适配 */\n@media (max-width: 768px) {\n  .tableau {\n    flex-wrap: wrap;\n  }\n  \n  .tableau-column {\n    min-width: calc(25% - 10px);\n    margin-bottom: 20px;\n  }\n  \n  .card {\n    width: 60px;\n    height: 85px;\n    margin-bottom: -60px;\n  }\n  \n  .empty-slot {\n    width: 60px;\n    height: 85px;\n  }\n  \n  .stock-pile {\n    width: 60px;\n    height: 85px;\n  }\n  \n  .completed-pile {\n    width: 60px;\n    height: 85px;\n  }\n  \n  .game-info {\n    font-size: 16px;\n  }\n  \n  .card .card-face {\n    font-size: 14px;\n  }\n}\n</style>"],"names":["Suit","tableau","ref","stock","remainingStockDeals","completedPiles","gameWon","selectedCard","dragState","createDeck","deck","i","suit","value","shuffleDeck","shuffled","j","initGame","col","cardsInColumn","row","card","dealCards","checkForCompletedSequences","getCardValue","getSuitClass","getSuitSymbol","onDragStart","colIndex","cardIndex","event","canMoveSequence","startIndex","column","card1","card2","onDrop","fromCol","fromIndex","moveCards","toCol","fromColumn","toColumn","isValidMove","cardsToMove","lastCard","checkWinCondition","movingCard","targetCard","isCompleteSequence","onCardClick","newGame","onMounted","_openBlock","_createElementBlock","_hoisted_1","_cache","_createElementVNode","_hoisted_2","_toDisplayString","_hoisted_3","_hoisted_4","_normalizeClass","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_Fragment","_renderList","n","_hoisted_9","$event","_hoisted_12","_hoisted_14"],"mappings":"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"}